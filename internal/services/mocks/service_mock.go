// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/packs_calculator_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPacksCalculator is a mock of PacksCalculator interface.
type MockPacksCalculator struct {
	ctrl     *gomock.Controller
	recorder *MockPacksCalculatorMockRecorder
}

// MockPacksCalculatorMockRecorder is the mock recorder for MockPacksCalculator.
type MockPacksCalculatorMockRecorder struct {
	mock *MockPacksCalculator
}

// NewMockPacksCalculator creates a new mock instance.
func NewMockPacksCalculator(ctrl *gomock.Controller) *MockPacksCalculator {
	mock := &MockPacksCalculator{ctrl: ctrl}
	mock.recorder = &MockPacksCalculatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPacksCalculator) EXPECT() *MockPacksCalculatorMockRecorder {
	return m.recorder
}

// AddPackSize mocks base method.
func (m *MockPacksCalculator) AddPackSize(size uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPackSize", size)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPackSize indicates an expected call of AddPackSize.
func (mr *MockPacksCalculatorMockRecorder) AddPackSize(size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPackSize", reflect.TypeOf((*MockPacksCalculator)(nil).AddPackSize), size)
}

// CalculatePacks mocks base method.
func (m *MockPacksCalculator) CalculatePacks(orderQty uint32) (map[uint32]uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculatePacks", orderQty)
	ret0, _ := ret[0].(map[uint32]uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculatePacks indicates an expected call of CalculatePacks.
func (mr *MockPacksCalculatorMockRecorder) CalculatePacks(orderQty interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculatePacks", reflect.TypeOf((*MockPacksCalculator)(nil).CalculatePacks), orderQty)
}

// DeletePackSize mocks base method.
func (m *MockPacksCalculator) DeletePackSize(size uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePackSize", size)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePackSize indicates an expected call of DeletePackSize.
func (mr *MockPacksCalculatorMockRecorder) DeletePackSize(size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePackSize", reflect.TypeOf((*MockPacksCalculator)(nil).DeletePackSize), size)
}
